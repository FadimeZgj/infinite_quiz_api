name: PHP Composer

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3.6'
        extensions: pdo_mysql

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Wait for MySQL to be ready
      run: sleep 15

    - name: Start Symfony server
      run: |
        wget https://get.symfony.com/cli/installer -O - | bash
        export PATH="$HOME/.symfony5/bin:$PATH"
        server:ca:install
        symfony serve -d
      shell: bash

    - name: Set up database
      run: |
        php bin/console doctrine:database:create --env=test
      env:
        DATABASE_URL: "mysql://root:root@127.0.0.1:3306/test_db"

    - name: Generate SSL Keys
      run: |
        mkdir -p config/jwt
        openssl genpkey -out config/jwt/private.pem -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096 -pass pass:$JWT_PASSPHRASE
        openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout -passin pass:$JWT_PASSPHRASE
      env:
        JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
      shell: bash

    - name: Run PHP test suite
      run: composer run-script test

    - name: Run Newman Tests
      run: |
        npm install -g newman
        newman run postman/postman_collection.json -e postman/postman_environment.json
      shell: bash

    - name: Clean up generated keys
      if: always()
      run: rm -rf certs/
